import {Request, Response} from 'express';
import {<%= props.firstLetterCapital %>} from '../../../../entities/<%= props.firstLetterCapital %>';
import {<%= props.actionFirstCapital %><%= props.firstLetterCapital %>UseCase} from './<%= props.actionLower %><%= props.firstLetterCapital %>UseCase';

class <%= props.actionFirstCapital %><%= props.firstLetterCapital %>Controller {
	constructor(private <%= props.actionLower %><%= props.firstLetterCapital %>UseCase: <%= props.actionFirstCapital %><%= props.firstLetterCapital %>UseCase) {}

	async handle(request: Request, response: Response): Promise<Response> {
		return new Promise((resolve, reject)=> {
			try {
				const userId:string = request.params.idUser;
				const <%= props.allLower%>Result: <%= props.firstLetterCapital %> = new <%= props.firstLetterCapital %>(request.body.id, request.body);
				this.<%= props.actionLower %><%= props.firstLetterCapital %>UseCase.execute(userId, <%= props.allLower%>Result).then(async (result)=>{
					const <%= props.allLower%><%= props.actionFirstCapital %>d:boolean = result ? result : false;
					if (<%= props.allLower%><%= props.actionFirstCapital %>d) {
						resolve(response.status(200).send({
							message: '<%= props.firstLetterCapital %> atualizada com sucesso.',
							<%= props.firstLetterCapital %>: <%= props.allLower%>Result,
						}));
					}
					resolve(response.status(500).send({
						message: 'Não foi possível atualizar a <%= props.firstLetterCapital %>.',
						<%= props.firstLetterCapital %>: <%= props.allLower%>Result,
					}));
				});
			} catch (error) {
				reject(error);
			}
		});
	}
}

export {<%= props.actionFirstCapital %><%= props.firstLetterCapital %>Controller};
