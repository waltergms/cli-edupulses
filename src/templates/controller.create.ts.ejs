import {Request, Response} from 'express';
import {<%= props.actionFirstCapital %><%= props.firstLetterCapital %>UseCase} from './<%= props.actionFirstCapital %><%= props.firstLetterCapital %>UseCase';
import {I<%= props.actionFirstCapital %><%= props.firstLetterCapital %>RequestDTO} from './<%= props.actionFirstCapital %><%= props.firstLetterCapital %>DTO';

class <%= props.actionFirstCapital %><%= props.firstLetterCapital %>Controller {
	constructor(private <%= props.actionLower %><%= props.firstLetterCapital %>UseCase: <%= props.actionFirstCapital %><%= props.firstLetterCapital %>UseCase) {}

	async handle(request: Request, response: Response): Promise<Response> {
		const <%= props.firstLetterCapital %><%= props.actionFirstCapital %>: I<%= props.actionFirstCapital %><%= props.firstLetterCapital %>RequestDTO = {...request.body};
		const idUser: string = request.params.idUser;

		return new Promise((resolve, reject) => {
			try {
				this.<%= props.actionLower %><%= props.firstLetterCapital %>UseCase
					.execute(idUser, <%= props.firstLetterCapital %><%= props.actionFirstCapital %>)
					.then((result) => {
						response.send(result).status(200);
						resolve(result);
					})
					.catch((error) => {
						reject(error);
					});
			} catch (error) {
				reject(error);
			}
		});
	}
}

export {<%= props.actionFirstCapital %><%= props.firstLetterCapital %>Controller};
